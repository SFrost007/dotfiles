[user]
	name = Simon Frost

[core]
#	autocrlf = true
	pager = less -FRSX
	editor = /usr/local/bin/vim
	excludesfile = /Users/spf/.gitignore_global
#	whitespace=fix,-indent-with-non-tab,training-space,cr-at-eol

[apply]
#	whitespace=fix

[alias]
	di = diff
	ci = commit
	co = checkout
	cp = cherry-pick
	ff = merge FETCH_HEAD
	ann = blame
	st = status
	w = whatchanged
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%C(white) %s %Creset- %C(yellow)%an %Cgreen%cr%Creset' --abbrev-commit --date=relative
	email = config user.email
	tempignore = update-index --assume-unchanged
	unignore = update-index --really-refresh
	deletebranch = "!f() { \
		if [ $(git rev-parse --abbrev-ref HEAD) == $1 ]; then \
			echo \"Error: Cannot delete current branch, aborting..\"; \
			exit 1; \
		fi; \
		locid=$(git rev-parse $1); \
		remid=$(git ls-remote --exit-code origin $1); \
		if [ $? -eq 2 ]; then \
			echo \"Branch '$1' does not exist on origin, aborting..\"; \
			exit 1; \
		else \
			remid=$(echo \"$remid\" | awk 'END {print $1}'); \
		fi; \
		if [ $locid != $remid ]; then \
			echo \"Remote and local refs for '$1' differ, aborting..\"; \
			echo \"Local:  $locid\"; \
			echo \"Remote: $remid\"; \
		else \
			git branch -d $1; \
			if [ $? -ne 0 ]; then \
				echo \"Local delete failed, remote delete aborted..\"; \
			else \
				git push origin --delete $1; \
			fi; \
		fi; \
	}; f"
	incoming = "!f() { \
		curbranch=$(git rev-parse --abbrev-ref HEAD); \
		git fetch; \
		git log --no-merges --pretty=format:'%Cred%h%Creset -%C(white) %<(80,trunc)%s %Creset- %C(yellow)%an %Cgreen%cr%Creset' $curbranch..origin/$curbranch;\
	}; f"

[color]
	diff = auto
	status = auto
	branch = auto
	interactive = auto
	ui = auto
	pager = true

[color "branch"]
	remote = red

[color "status"]
	added = blue
	changed = red
	untracked = red

[status]
	showuntrackedfiles = all

[push]
	default = tracking

[rerere]
	enabled = true
	autoupdate = true

[rebase]
	stat = true

[credential]
	helper = osxkeychain
